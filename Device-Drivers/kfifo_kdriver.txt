#include <linux/kfifo.h>

struct my_device {
    struct kfifo fifo;
    // other device-specific fields
};

static int my_device_open(struct inode *inode, struct file *filp)
{
    struct my_device *dev;
    int ret;

    dev = container_of(inode->i_cdev, struct my_device, cdev);
    filp->private_data = dev;

    // initialize the kfifo buffer
    ret = kfifo_alloc(&dev->fifo, PAGE_SIZE, GFP_KERNEL);
    if (ret)
        return ret;

    return 0;
}

static int my_device_release(struct inode *inode, struct file *filp)
{
    struct my_device *dev = filp->private_data;

    // free the kfifo buffer
    kfifo_free(&dev->fifo);

    return 0;
}

static ssize_t my_device_write(struct file *filp, const char __user *buf,
                   size_t count, loff_t *f_pos)
{
    struct my_device *dev = filp->private_data;
    unsigned int copied;

    // write data to the kfifo buffer
    copied = kfifo_in(&dev->fifo, buf, count);

    return copied;
}

static ssize_t my_device_read(struct file *filp, char __user *buf,
                  size_t count, loff_t *f_pos)
{
    struct my_device *dev = filp->private_data;
    unsigned int copied;

    // read data from the kfifo buffer
    copied = kfifo_out(&dev->fifo, buf, count);

    return copied;
}
