#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/uaccess.h>

static dev_t dev;
static struct cdev cdev;
static char buffer[256];

static int device_open(struct inode *inode, struct file *file)
{
    printk(KERN_INFO "device_open()\n");
    return 0;
}

static int device_release(struct inode *inode, struct file *file)
{
    printk(KERN_INFO "device_release()\n");
    return 0;
}

static ssize_t device_read(struct file *file, char __user *buf, size_t len, loff_t *offset)
{
    printk(KERN_INFO "device_read()\n");
    if (*offset >= sizeof(buffer))
        return 0;
    if (*offset + len > sizeof(buffer))
        len = sizeof(buffer) - *offset;

    if (copy_to_user(buf, buffer + *offset, len))
        return -EFAULT;
    *offset += len;
    return len;
}

static ssize_t device_write(struct file *file, const char __user *buf, size_t len, loff_t *offset)
{
    printk(KERN_INFO "device_write()\n");
    if (*offset >= sizeof(buffer))
        return -ENOSPC;
    if (*offset + len > sizeof(buffer))
        len = sizeof(buffer) - *offset;

    if (copy_from_user(buffer + *offset, buf, len))
        return -EFAULT;
    *offset += len;
    return len;
}

static const struct file_operations fops = {
    .owner = THIS_MODULE,
    .open = device_open,
    .release = device_release,
    .read = device_read,
    .write = device_write,
};

static int __init my_init(void)
{
    if (alloc_chrdev_region(&dev, 0, 1, "my_char_dev") < 0)
        return -1;

    cdev_init(&cdev, &fops);

    if (cdev_add(&cdev, dev, 1) < 0)
        return -1;
    printk(KERN_INFO "my_char_dev: module loaded\n");
    return 0;
}

static void __exit my_exit(void)
{
    cdev_del(&cdev);
    unregister_chrdev_region(dev, 1);
    printk(KERN_INFO "my_char_dev: module unloaded\n");
}

module_init(my_init);
module_exit(my_exit);
